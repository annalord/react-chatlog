{"version":3,"sources":["components/TimeStamp.js","components/ChatEntry.js","components/ChatLog.js","components/SelectColor.js","App.js","registerServiceWorker.js","index.js"],"names":["TimeStamp","props","time","DateTime","fromISO","absolute","toFormat","relative","toRelative","title","ChatEntry","likeIcon","liked","className","location","sender","color","body","timeStamp","onClick","onToggleLiked","id","ChatLog","allChatEntries","entries","map","entry","SelectColor","onSelectColor","senders","chatMessages","message","includes","push","local","remote","chatMessagesWithLocation","App","useState","messageData","setMessageData","setColor","reduce","total","current","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.792b0c2e.chunk.js","sourcesContent":["import { DateTime } from 'luxon';\n\nconst TimeStamp = (props) => {\n  const time = DateTime.fromISO(props.time);\n  const absolute = time.toFormat('MMMM Do YYYY, h:mm:ss a');\n  const relative = time.toRelative();\n\n  return <span title={absolute}>{relative}</span>;\n};\n\nexport default TimeStamp;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TimeStamp from './TimeStamp';\nimport './ChatEntry.css';\nimport '../App.css';\n\nconst ChatEntry = (props) => {\n\n  const likeIcon = props.liked ? '❤️' : '🤍';\n\n  return (\n    <div className={`chat-entry ${props.location}`}>\n      <h2 className=\"entry-name\">{props.sender}</h2>\n      <section className=\"entry-bubble\">\n        <p className={props.color} >{props.body}</p>\n        <p className=\"entry-time\">\n          <TimeStamp time={props.timeStamp}></TimeStamp>\n        </p>\n        <button className=\"like\" onClick={() => props.onToggleLiked(props.id)}>\n          {likeIcon}\n        </button>\n      </section>\n    </div>\n  );\n};\n\nChatEntry.propTypes = {\n  sender: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n  timeStamp: PropTypes.string.isRequired,\n  liked: PropTypes.bool.isRequired,\n  onToggleLiked: PropTypes.func.isRequired, \n  id: PropTypes.number.isRequired,\n  location: PropTypes.string.isRequired, \n  color: PropTypes.string\n};\n\nexport default ChatEntry;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ChatEntry from './ChatEntry';\n\nconst ChatLog = (props) => {\n  const allChatEntries = props.entries.map((entry) => {\n    return (\n      <ChatEntry\n        sender={entry.sender}\n        body={entry.body}\n        timeStamp={entry.timeStamp}\n        liked={entry.liked}\n        onToggleLiked={props.onToggleLiked}\n        id={entry.id}\n        key={entry.id}\n        location={entry.location}\n        color={entry.color}\n      ></ChatEntry>\n    );\n  });\n\n  return <div className=\"chat-log\">{allChatEntries}</div>;\n};\n\nChatLog.propTypes = {\n  entries: PropTypes.arrayOf(PropTypes.shape( {\n    sender: PropTypes.string.isRequired, \n    body: PropTypes.string.isRequired,\n    timeStamp: PropTypes.string.isRequired, \n    liked: PropTypes.bool.isRequired,\n    id: PropTypes.number.isRequired,\n    location: PropTypes.string.isRequired, \n    color: PropTypes.string\n    }\n  )),\n  onToggleLiked: PropTypes.func.isRequired\n};\n\nexport default ChatLog;","import PropTypes from 'prop-types'; \n\nconst SelectColor = (props) => {\n\n  return (\n    <div>\n      <button onClick={() => props.onSelectColor(props.sender, 'red')}>❤️</button>\n      <button onClick={() => props.onSelectColor(props.sender, 'orange')}>🧡</button>\n      <button onClick={() => props.onSelectColor(props.sender, 'yellow')}>💛</button>\n      <button onClick={() => props.onSelectColor(props.sender, 'green')}>💚</button>\n      <button onClick={() => props.onSelectColor(props.sender, 'blue')}>💙</button>\n      <button onClick={() => props.onSelectColor(props.sender, 'purple')}>💜</button>\n    </div> \n  )\n\n};\n\nSelectColor.propTypes = {\n  sender: PropTypes.string.isRequired,\n  onSelectColor: PropTypes.func.isRequired\n}\nexport default SelectColor;","import React, { useState } from 'react';\nimport './App.css';\nimport ChatLog from './components/ChatLog';\nimport chatMessages from './data/messages.json';\nimport SelectColor from './components/SelectColor';\n\n// iterate through chatMessages and create a list of senders\nconst senders = [];\nfor (const message of chatMessages) {\n  if (!senders.includes(message.sender)) {\n    senders.push(message.sender);\n  }\n}\n\n// assign first person in senders to local and second to remote (assumes only 2 senders and that the first sender is the local one, wouldn't work for group text!)\nconst local = senders[0];\nconst remote = senders[1];\n\n// maps through chatMessages and adds local/remote\nconst chatMessagesWithLocation = chatMessages.map((message) => {\n  if (message.sender === local) {\n    return { ...message, location: 'local' };\n  } else {\n    return { ...message, location: 'remote' };\n  }\n});\n\n\nconst App = () => {\n  const [messageData, setMessageData] = useState(chatMessagesWithLocation);\n\n  const toggleLiked = (id) => {\n    setMessageData((messageData) =>\n      messageData.map((message) => {\n        if (message.id === id) {\n          return { ...message, liked: !message.liked };\n        } else {\n          return message;\n        }\n      })\n    );\n  };\n\n  const getTotalLiked = () => {\n    return messageData.reduce((total, current) => {\n      return total + current.liked;\n    }, 0);\n  };\n\n  //callback function for SelectColor \n  const setColor = (sender, color) => {\n    setMessageData((messageData) =>\n      messageData.map((message) => {\n        if (message.sender === sender) {\n          return {...message, color: color };\n        } else {\n          return message;\n        }\n      })\n    );\n  };\n\n  return (\n    <div id=\"App\">\n      <header>\n        <h1>\n          Chat between {local} and {remote}\n        </h1>\n        <section>\n          <span className='widget'>{local}'s color:\n            <SelectColor sender={local} onSelectColor={setColor}></SelectColor>\n          </span>\n          <div className='widget' id=\"heartWidget\">{getTotalLiked()} ❤️s</div>\n          <span className='widget'>{remote}'s color:\n            <SelectColor sender={remote} onSelectColor={setColor}></SelectColor>\n          </span>\n        </section>\n      </header>\n      <main>\n        <ChatLog entries={messageData} onToggleLiked={toggleLiked}></ChatLog>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}